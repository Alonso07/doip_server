name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Quick checks that run on every PR
  quick-checks:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 2.1.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction --no-root

    - name: Run linting
      run: |
        poetry run flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        poetry run flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting
      run: poetry run black --check --diff src/ tests/

    - name: Run security checks
      run: |
        poetry run bandit -r src/ -f json -o reports/bandit-report.json || true
        poetry run safety check --json --output reports/safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          reports/bandit-report.json
          reports/safety-report.json

  # Comprehensive tests on multiple platforms
  test:
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.11, 3.12]
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 2.1.1
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Configure Poetry (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Setup Poetry (Windows)
      if: runner.os == 'Windows'
      uses: ./.github/actions/setup-poetry-windows

    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-root
        poetry check

    - name: Run all tests with coverage
      run: |
        poetry run pytest tests/ -v --cov=doip_server --cov-report=xml --cov-report=term-missing

    - name: Check if coverage file exists
      shell: bash
      run: |
        if [ -f "coverage.xml" ]; then
          echo "Coverage file found, size: $(wc -c < coverage.xml) bytes"
        else
          echo "Coverage file not found, creating empty one"
          echo '<?xml version="1.0" ?><coverage></coverage>' > coverage.xml
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      if: always()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.os }}-${{ matrix.python-version }}
        fail_ci_if_error: false

  # Build only on main branch
  build:
    needs: [quick-checks, test]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 2.1.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-root
        poetry check

    - name: Build package
      run: poetry build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/