name: Build Executables

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to build (comma-separated: windows, macos, linux)'
        required: false
        default: 'windows,macos,linux'
        type: string

env:
  PYTHON_VERSION: '3.11'

jobs:
  build:
    name: Build for ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: windows
            os: windows-latest
            artifact_name: doip_server_windows
            executable_name: doip_server.exe
          - platform: macos
            os: macos-latest
            artifact_name: doip_server_macos
            executable_name: doip_server
          - platform: linux
            os: ubuntu-latest
            artifact_name: doip_server_linux
            executable_name: doip_server

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pyinstaller

    - name: Install PyInstaller
      run: |
        pip install pyinstaller

    - name: Build executable
      run: |
        # Create build directory
        mkdir -p dist/executables
        
        # Generate PyInstaller spec file dynamically
        echo "Generating PyInstaller spec file..."
        python scripts/build/generate_spec.py . doip_server.spec
        
        # Build with PyInstaller
        python -m PyInstaller \
          --clean \
          --noconfirm \
          --distpath dist/executables \
          --workpath build \
          doip_server.spec
        
        # Clean up generated spec file
        rm -f doip_server.spec

    - name: Test executable
      run: |
        # Test the built executable
        if [ -f "dist/executables/${{ matrix.executable_name }}" ]; then
          echo "Testing executable..."
          dist/executables/${{ matrix.executable_name }} --help
          echo "Executable test passed"
        else
          echo "Error: Executable not found"
          exit 1
        fi

    - name: Create distribution package
      run: |
        # Create distribution directory
        DIST_NAME="doip_server_${{ matrix.platform }}_$(date +%Y%m%d_%H%M%S)"
        DIST_PATH="dist/executables/$DIST_NAME"
        mkdir -p "$DIST_PATH"
        
        # Copy executable and config
        if [ -f "dist/executables/${{ matrix.executable_name }}" ]; then
          cp "dist/executables/${{ matrix.executable_name }}" "$DIST_PATH/"
        else
          echo "Error: Executable not found"
          exit 1
        fi
        cp -r "config" "$DIST_PATH/"
        cp "README.md" "$DIST_PATH/"
        cp "LICENSE" "$DIST_PATH/"
        
        # Create run script
        cat > "$DIST_PATH/run_doip_server.sh" << 'EOF'
        #!/bin/bash
        # DoIP Server Runner Script
        
        SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        cd "$SCRIPT_DIR"
        
        # Check if executable exists
        if [ -f "./${{ matrix.executable_name }}" ]; then
          ./${{ matrix.executable_name }} --gateway-config config/gateway1.yaml "$@"
        else
          echo "Error: DoIP Server executable not found"
          exit 1
        fi
        EOF
        
        chmod +x "$DIST_PATH/run_doip_server.sh"
        
        # Create Windows batch file
        cat > "$DIST_PATH/run_doip_server.bat" << 'EOF'
        @echo off
        REM DoIP Server Runner Script for Windows
        
        cd /d "%~dp0"
        
        REM Check if executable exists
        if exist "${{ matrix.executable_name }}" (
          ${{ matrix.executable_name }} --gateway-config config\gateway1.yaml %*
        ) else (
          echo Error: DoIP Server executable not found
          exit /b 1
        )
        EOF
        
        # Create archive
        cd "dist/executables"
        if command -v tar &> /dev/null; then
          tar -czf "${DIST_NAME}.tar.gz" "$DIST_NAME"
          echo "Created: ${DIST_NAME}.tar.gz"
        fi
        
        if command -v zip &> /dev/null; then
          zip -r "${DIST_NAME}.zip" "$DIST_NAME"
          echo "Created: ${DIST_NAME}.zip"
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          dist/executables/${{ matrix.executable_name }}
          dist/executables/*.tar.gz
          dist/executables/*.zip
        retention-days: 30

    - name: Upload to release (if tagged)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/executables/${{ matrix.executable_name }}
          dist/executables/*.tar.gz
          dist/executables/*.zip
        draft: false
        prerelease: false

  test-executables:
    name: Test Executables
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Linux executable
      uses: actions/download-artifact@v5
      with:
        name: doip_server_linux
        path: linux_executable/

    - name: Test Linux executable
      run: |
        # Test basic functionality
        if [ -f "linux_executable/doip_server" ]; then
          echo "Testing Linux executable..."
          linux_executable/doip_server --help
          echo "Linux executable test passed"
        else
          echo "Error: Linux executable not found"
          exit 1
        fi

    - name: Download Windows executable
      uses: actions/download-artifact@v5
      with:
        name: doip_server_windows
        path: windows_executable/

    - name: Test Windows executable
      run: |
        # Test basic functionality using Wine (if available)
        if command -v wine &> /dev/null; then
          if [ -f "windows_executable/doip_server.exe" ]; then
            echo "Testing Windows executable with Wine..."
            wine windows_executable/doip_server.exe --help
            echo "Windows executable test passed"
          else
            echo "Error: Windows executable not found"
            exit 1
          fi
        else
          echo "Wine not available, skipping Windows executable test"
        fi

    - name: Download macOS executable
      uses: actions/download-artifact@v5
      with:
        name: doip_server_macos
        path: macos_executable/

    - name: Test macOS executable
      run: |
        # Test basic functionality (may not work on Linux)
        if [ -f "macos_executable/doip_server" ]; then
          echo "Testing macOS executable..."
          # Note: This may fail on Linux due to architecture differences
          macos_executable/doip_server --help || echo "macOS executable test skipped (architecture mismatch)"
        else
          echo "Error: macOS executable not found"
          exit 1
        fi
